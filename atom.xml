<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TsingYi&#39;s Blog</title>
  
  
  <link href="https://tsingyi1220.github.io/atom.xml" rel="self"/>
  
  <link href="https://tsingyi1220.github.io/"/>
  <updated>2022-11-23T09:34:23.125Z</updated>
  <id>https://tsingyi1220.github.io/</id>
  
  <author>
    <name>Tsing Yi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo图片引入</title>
    <link href="https://tsingyi1220.github.io/posts/22565.html"/>
    <id>https://tsingyi1220.github.io/posts/22565.html</id>
    <published>2022-11-22T16:22:42.755Z</published>
    <updated>2022-11-23T09:34:23.125Z</updated>
    
    <content type="html"><![CDATA[<p> <code>source</code> 文件夹中除了文章以外还可能需要引入其它文件，例如图片、CSS、JS 文件等。如果Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p><p>如果需要更有规律地提供图片和其他资源以及想要将资源分布在各个文章上，可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">_config.ymlpost_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>安装插件hexo图片管理插件：<code>npm i hexo-asset-image</code></p><p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： <code>image.jpg</code> 位置为 <code>/2022/09/01/Hello world/image.jpg</code> ，这表示它是 <code>/2022/09/01/Hello world/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2022/09/01/Hello world/image.jpg&quot;&gt;</code> 。</p><p>当资源文件管理功能打开后，Hexo将会在每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个同名文件夹。将所有与当前文章有关的资源放在这个关联文件夹中之后，之后可以通过相对路径来引用它们，这样就可以同时在Markdown编辑器和文章页中预览所需图片。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; &lt;code&gt;source&lt;/code&gt; 文件夹中除了文章以外还可能需要引入其它文件，例如图片、CSS、JS 文件等。如果Hexo项目中只有少量图片，那最简单的方法就是将它们放在 &lt;code&gt;source/images&lt;/code&gt; 文件夹中。然后通过类似于 &lt;code&gt;!</summary>
      
    
    
    
    <category term="Hexo" scheme="https://tsingyi1220.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo优化" scheme="https://tsingyi1220.github.io/tags/Hexo%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo提交报错</title>
    <link href="https://tsingyi1220.github.io/posts/49461.html"/>
    <id>https://tsingyi1220.github.io/posts/49461.html</id>
    <published>2022-11-10T16:00:00.000Z</published>
    <updated>2022-11-23T07:46:01.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决hexo报错spwan-failed"><a href="#解决hexo报错spwan-failed" class="headerlink" title="解决hexo报错spwan failed"></a>解决hexo报错spwan failed</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FATAL Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: Spawn failed</span></span><br><span class="line"><span class="string">    at ChildProcess.&lt;anonymous&gt; (D:\Blog\node_modules\hexo-util\lib\spawn.js:51:21)</span></span><br><span class="line"><span class="string">    at ChildProcess.emit (node:events:527:28)</span></span><br><span class="line"><span class="string">    at ChildProcess.cp.emit (D:\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span></span><br><span class="line"><span class="string">    at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12)</span></span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>进行以下处理</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##进入博客根目录(以我的为例)</span></span><br><span class="line"><span class="built_in">cd</span> D:\Blog</span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交文件夹</span></span><br><span class="line"><span class="built_in">rm</span> -rf .deploy_git/</span><br><span class="line"></span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>最后重新生成提交</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决hexo报错spwan-failed&quot;&gt;&lt;a href=&quot;#解决hexo报错spwan-failed&quot; class=&quot;headerlink&quot; title=&quot;解决hexo报错spwan failed&quot;&gt;&lt;/a&gt;解决hexo报错spwan failed&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Hexo" scheme="https://tsingyi1220.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo报错" scheme="https://tsingyi1220.github.io/tags/Hexo%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="https://tsingyi1220.github.io/posts/16061.html"/>
    <id>https://tsingyi1220.github.io/posts/16061.html</id>
    <published>2022-10-11T16:00:00.000Z</published>
    <updated>2022-11-23T07:48:19.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h1><p>假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。</p><ol><li>深拷贝，是拷贝对象各个层级的属性，拷贝对象的地址。<br>例如：<code>JSON.parse(JSON.stringify())</code>(如果变量中含有Promise对象，则不可以使用该方法)</li><li>浅拷贝，指针指向堆中相同的地址，所有会改变原来的数据。<br>例如：<code>Object.assign()</code> <code>Array.prototype.slice()</code></li></ol><h1 id="对象的扩展运算符（…）深拷贝还是浅拷贝"><a href="#对象的扩展运算符（…）深拷贝还是浅拷贝" class="headerlink" title="对象的扩展运算符（…）深拷贝还是浅拷贝"></a>对象的扩展运算符（…）深拷贝还是浅拷贝</h1><ol><li><p>如果只是一层数组或是对象，其元素只是简单类型的元素，那么属于深拷贝（即只有一层拷贝）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;;</span><br><span class="line">b.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">age</span>); <span class="comment">// 22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">age</span>); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure></li><li><p>如果数组或对象中的元素是引用类型的元素，那么就是浅拷贝</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line"><span class="attr">address</span>: &#123;</span><br><span class="line"><span class="attr">city</span>: <span class="string">&#x27;Anhui&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;...a&#125;;</span><br><span class="line">b.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&#x27;Shanghai&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">address</span>.<span class="property">city</span>);  <span class="comment">// Shanghai</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">address</span>.<span class="property">city</span>);  <span class="comment">// Shanghai</span></span><br></pre></td></tr></table></figure></li><li><p>如何使得深拷贝</p>   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line"><span class="attr">address</span>: &#123;</span><br><span class="line"><span class="attr">city</span>: <span class="string">&#x27;Anhui&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = &#123;</span><br><span class="line">...a,</span><br><span class="line"><span class="attr">address</span>: &#123;...a.<span class="property">address</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">b.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&#x27;Shanghai&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">address</span>.<span class="property">city</span>);  <span class="comment">// Anhui</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">address</span>.<span class="property">city</span>);  <span class="comment">// Shanghai</span></span><br></pre></td></tr></table></figure><p>   或者利用JSON.parse(JSON.stringfy(xxx))来实现深拷贝<br>   注意：JSON.parse(JSON.stringfy(xxx))的方法，</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深拷贝和浅拷贝的区别&quot;&gt;&lt;a href=&quot;#深拷贝和浅拷贝的区别&quot; class=&quot;headerlink&quot; title=&quot;深拷贝和浅拷贝的区别&quot;&gt;&lt;/a&gt;深拷贝和浅拷贝的区别&lt;/h1&gt;&lt;p&gt;假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅</summary>
      
    
    
    
    <category term="Web前端" scheme="https://tsingyi1220.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://tsingyi1220.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Sky星空粒子背景特效</title>
    <link href="https://tsingyi1220.github.io/posts/23413.html"/>
    <id>https://tsingyi1220.github.io/posts/23413.html</id>
    <published>2022-09-05T16:00:00.000Z</published>
    <updated>2022-11-24T09:39:57.682Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><code>[Blogroot]\_config.butterfly.yml</code> 找到 <code>index_img</code> 设置为空：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> </span><br></pre></td></tr></table></figure></li><li><p><code>[Blogroot]\_config.butterfly.yml</code> 找到 <code>background</code> 设置渐变色：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Website Background (設置網站背景)</span></span><br><span class="line"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">&#x27;linear-gradient(to right top, #009fff, #ec2f4b)&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>[Blogroot]\themes\butterfly\source\css\_global\index.styl</code> 找到 <code>#web_bg</code> 设置渐变动画：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">999</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: $web-bg;</span><br><span class="line">    <span class="attribute">background-attachment</span>: local;</span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">animation</span>: bganimation <span class="number">10s</span> infinite;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">800%</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>新建 <code>[Blogroot]\themes\butterfly\source\css\[_username]\index.styl</code> ，添加渐变动画 <code>CSS</code> 和 粒子元素的样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 樱花特效样式 */</span></span><br><span class="line"><span class="selector-class">.canvas-container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 阅读模式下隐藏背景</span><br><span class="line"><span class="selector-class">.read-mode</span> <span class="selector-class">.canvas-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">// 首页背景渐变动画</span><br><span class="line"><span class="keyword">@keyframes</span> bganimation &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得在 <code>[Blogroot]\themes\butterfly\source\css\index.styl</code> 引入，以后所有的 <code>css</code> 都可以写在这个里面</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">if (hexo-config(&#x27;css_prefix&#x27;)) &#123;</span><br><span class="line">@import &#x27;nib&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@import &#x27;_third-party/normalize.min.css&#x27;;</span><br><span class="line">// project</span><br><span class="line">@import &#x27;var&#x27;;</span><br><span class="line">@import &#x27;_global/*&#x27;;</span><br><span class="line">@import &#x27;_highlight/highlight&#x27;;</span><br><span class="line">@import &#x27;_page/*&#x27;;</span><br><span class="line">@import &#x27;_layout/*&#x27;;</span><br><span class="line">@import &#x27;_tags/*&#x27;;</span><br><span class="line">@import &#x27;_mode/*&#x27;;</span><br><span class="line"><span class="addition">+ @import &#x27;_cyan/*&#x27;;</span></span><br><span class="line"></span><br><span class="line">// search</span><br><span class="line">if (hexo-config(&#x27;algolia_search.enable&#x27;)) &#123;</span><br><span class="line">@import &#x27;_search/index&#x27;;</span><br><span class="line">@import &#x27;_search/algolia&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (hexo-config(&#x27;local_search&#x27;) &amp;&amp; hexo-config(&#x27;local_search.enable&#x27;)) &#123;</span><br><span class="line">@import &#x27;_search/index&#x27;;</span><br><span class="line">@import &#x27;_search/local-search&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>[Blogroot]\themes\butterfly\layout\includes\layout.pug</code> 添加元素：</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">if page.type !== &#x27;404&#x27;</span><br><span class="line"><span class="addition">+     #canvas.canvas-container</span></span><br><span class="line">      #body-wrap(class=pageType)</span><br><span class="line">        include ./header/index.pug</span><br><span class="line"></span><br><span class="line">        main#content-inner.layout(class=hideAside)</span><br><span class="line">          if body</span><br><span class="line">            div!= body</span><br><span class="line">          else</span><br><span class="line">            block content</span><br><span class="line">            if theme.aside.enable &amp;&amp; page.aside !== false</span><br><span class="line">              include widget/index.pug</span><br></pre></td></tr></table></figure></li><li><p>新建 <code>[Blogroot]\themes\butterfly\source\js\sky.js</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scene,</span><br><span class="line">    camera,</span><br><span class="line">    renderer,</span><br><span class="line">    container,</span><br><span class="line">    aspect,</span><br><span class="line">    fov,</span><br><span class="line">    plane,</span><br><span class="line">    far,</span><br><span class="line">    mouseX,</span><br><span class="line">    mouseY,</span><br><span class="line">    windowHalfX,</span><br><span class="line">    windowHalfY,</span><br><span class="line">    geometry,</span><br><span class="line">    starStuff,</span><br><span class="line">    materialOptions,</span><br><span class="line">    stars;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>();</span><br><span class="line"><span class="title function_">animate</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">`canvas`</span>);</span><br><span class="line"></span><br><span class="line">    mouseX = <span class="number">0</span>;</span><br><span class="line">    mouseY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    aspect = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    fov = <span class="number">40</span>;</span><br><span class="line">    plane = <span class="number">1</span>;</span><br><span class="line">    far = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">    windowHalfX = <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="number">2</span>;</span><br><span class="line">    windowHalfY = <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">        fov,</span><br><span class="line">        aspect,</span><br><span class="line">        plane,</span><br><span class="line">        far</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    camera.<span class="property">position</span>.<span class="property">z</span> = far / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>(&#123; <span class="attr">antialias</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    scene.<span class="property">fog</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">FogExp2</span>(<span class="number">0x1b1b1b</span>, <span class="number">0.0001</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">starForge</span>();</span><br><span class="line"></span><br><span class="line">    renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123; <span class="attr">antialias</span>: <span class="literal">true</span>, <span class="attr">alpha</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    renderer.<span class="title function_">setPixelRatio</span>((<span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>) ? <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> : <span class="number">1</span>);</span><br><span class="line">    renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line">    renderer.<span class="property">autoClear</span> = <span class="literal">false</span>;</span><br><span class="line">    renderer.<span class="title function_">setClearColor</span>(<span class="number">0x000000</span>, <span class="number">0.0</span>);</span><br><span class="line">    container.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, onMouseMove, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line">    <span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    camera.<span class="property">position</span>.<span class="property">x</span> += (mouseX - camera.<span class="property">position</span>.<span class="property">x</span>) * <span class="number">0.005</span>;</span><br><span class="line">    camera.<span class="property">position</span>.<span class="property">y</span> += (-mouseY - camera.<span class="property">position</span>.<span class="property">y</span>) * <span class="number">0.005</span>;</span><br><span class="line">    camera.<span class="title function_">lookAt</span>(scene.<span class="property">position</span>);</span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">starForge</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> amount = <span class="number">45000</span>;</span><br><span class="line">    geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">1000</span>, <span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    materialOptions = &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0xffffff</span>),</span><br><span class="line">        <span class="attr">size</span>: <span class="number">1.1</span>,</span><br><span class="line">        <span class="attr">transparency</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">opacity</span>: <span class="number">0.8</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    starStuff = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointsMaterial</span>(materialOptions);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; amount; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>();</span><br><span class="line">        item.<span class="property">x</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> - <span class="number">1000</span>;</span><br><span class="line">        item.<span class="property">y</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> - <span class="number">1000</span>;</span><br><span class="line">        item.<span class="property">z</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">2000</span> - <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        geometry.<span class="property">vertices</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stars = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PointCloud</span>(geometry, starStuff);</span><br><span class="line">    scene.<span class="title function_">add</span>(stars);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onMouseMove</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    mouseX = e.<span class="property">clientX</span> - windowHalfX;</span><br><span class="line">    mouseY = e.<span class="property">clientY</span> - windowHalfY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>[Blogroot]\_config.butterfly.yml</code> 找到 <code>inject</code>，引入 <code>js</code>，由于星空动画是基于 <code>three.js</code>，所以一定要先引入 <code>three.js</code>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.bootcdn.net/ajax/libs/three.js/0.146.0/three.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/js/sky.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>最后执行 <code>hexo cl,hexo g,hexo s</code> 三连即可看到效果。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[Blogroot]\_config.butterfly.yml&lt;/code&gt; 找到 &lt;code&gt;index_img&lt;/code&gt; 设置为空：&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="Hexo" scheme="https://tsingyi1220.github.io/categories/Hexo/"/>
    
    
    <category term="Butterfly美化" scheme="https://tsingyi1220.github.io/tags/Butterfly%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>命名规范</title>
    <link href="https://tsingyi1220.github.io/posts/17900.html"/>
    <id>https://tsingyi1220.github.io/posts/17900.html</id>
    <published>2022-09-04T16:00:00.000Z</published>
    <updated>2022-11-23T07:39:06.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、导航类"><a href="#一、导航类" class="headerlink" title="一、导航类"></a>一、导航类</h2><p>导航：nav             主导航：mainbav    子导航：subnav       顶导航：topnav</p><p>边导航：sidebar       左导航：leftsidebar 右导航：rightsidebar 菜单：menu</p><p>子菜单：submenu       标题：title       摘要：summary</p><h2 id="二、页面结构"><a href="#二、页面结构" class="headerlink" title="二、页面结构"></a>二、页面结构</h2><p>容器：container    页头：header      内容：content&#x2F;container      页面主体：main</p><p>页尾：footer      导航：nav         侧栏：sidebar                栏目：column</p><p>页面外围控制整体布局宽度：wrapper     左右中：left right center</p><h2 id="三、功能"><a href="#三、功能" class="headerlink" title="三、功能"></a>三、功能</h2><p>标志：logo             滚动：scroll      广告：banner           标签页：tab</p><p>登录：login            文章列表：list    登录条：loginbar       提示信息：msg</p><p>注册：regsiter         当前的：current   搜索：search           小技巧：tips</p><p>功能区：shop           图标：icon        标题：title            注释：note</p><p>加入：joinus           指南：guild       状态：status           服务：service</p><p>按钮：btn              热点：hot         合作伙伴：partner      新闻：news</p><p>友情链接：friendlink   下载：download    版权：copyright        投票：vote</p><h2 id="四、div英文释译"><a href="#四、div英文释译" class="headerlink" title="四、div英文释译"></a>四、div英文释译</h2><p>标题    title        字体    font       身体    body        大小    size</p><p>列表    list         文本    text       样式    style        对齐    align</p><p>图像    image        修饰    decoration 资源    source       线      line</p><p>宽度    width        穿过    through    高度    height       缩进    indent</p><p>行      line         斜体    italic     链接    link         加粗    bold</p><p>斜体    italic       加重    weight     加粗    bold         宽      width</p><p>输入    input        高      height     下面的  under        背景    background</p><p>顶部    top          主体    main</p><h2 id="五、css英文释译"><a href="#五、css英文释译" class="headerlink" title="五、css英文释译"></a>五、css英文释译</h2><p>重复        repeat         填充  padding  位置        position      正常        normal</p><p>显示类型    display        父级  parent   显示可见    visibility     子级        children</p><p>隐藏        hidden         顶部导航topnav显示        visible       溢出        overflow</p><p>列表        list         样式 style     边框        border       导航        nav</p><p>广告图片    banner        行高line-height边界        margin      页眉        header</p><h2 id="六、样式文件命名"><a href="#六、样式文件命名" class="headerlink" title="六、样式文件命名"></a>六、样式文件命名</h2><p>主要的master.css     模块module.css    基本共用base.css      布局，版面layout.css</p><p>主题themes.css       专栏columns.css   文字font.css         表单forms.css</p><p>补丁mend.css         打印print.css</p><h2 id="七、颜色释译"><a href="#七、颜色释译" class="headerlink" title="七、颜色释译"></a>七、颜色释译</h2><p>绿      green     红      red    蓝      blue      黑      black</p><p>灰      gray      黄      yellowa   紫      purple    白      white</p><p>棕      brown     卡其色  khaki</p><h2 id="六、命名参考"><a href="#六、命名参考" class="headerlink" title="六、命名参考"></a>六、命名参考</h2><p>登录条loginBar    标志：logo     侧边栏：sideBar    广告：banner</p><p>导航：nav         子导航：navBar 菜单：menu        子菜单：subMenu</p><p>搜索：search      滚动：scroll   页面主体：main     内容：content</p><p>标签页：tab        文章列表：list 提示信息：msg      小技巧：tips</p><p>栏目标题：title    加入：joins    指南：guild       服务：service</p><p>热点：hot         新闻：news     按钮：btn         投票：vote</p><p>状态：status      合作伙伴：partner     外套：wrap        商标：label</p><p>顶导航：topnav     左导航：leftSideBar   右导航：rightSideBar菜单内容：menuContent</p><p>菜单容器：menuContainer注释：note    边导航图标：sidebarIcon版权：copyright</p><p>友情链接：friendLink容器：container  页脚：footer      当前：current</p><p>激活：active      购物车：shop       登录：login       注册：regsiter</p><p>下载：download    面包屑：breadCrumb</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>1）文件编码统一使用 UTF-8 编码；<br>2）命名时以符合语义为主要参考指标，CSS属性书写规范，采用统一风格及命名方法；<br>3）结构清晰，层级关系明朗，以不超过三级为标准；<br>4）同一表现形式的样式要求可重复利用，模块组件类的样式要求可整体外部移植；<br>5）编写 CSS 的时候，应当避免使用CSS Hack，能不用则不用。<br>6）所有页面默认都针对Firefox 等最接近标准的浏览器进行设计，然后使用 IE 特有条件注释功能进行针对性修正。<br>7）请使用英文进行命名，尽量避免使用拼音。命名要求具有可读性，尽量避免使用缩写。命名虽然允许数字，但应尽量避免使用数字命名。<br>2、命名方法 要求采用统一的命名方法。常用命名方法有：<br>1）连写式命名法，如：helloworld<br>2）中线命名法，如：hello-world（目前采用此方法的较多，建议采用）<br>3）下划线命名法，如：hello_world<br>4）骆驼命名法，如：helloWorld<br>5）帕斯卡命名法，如：HelloWorld<br>6）其他方法。<br>3、样式文件命名规范 如：<br>全局的：global.css；<br>主要的：master.css；<br>布局、版面：layout.css；<br>专栏：columns.css；<br>文字：font.css；<br>打印样式：print.css；<br>主题：themes.css；<br>补丁：pacth.css；<br>格式化浏览器：base.css等。<br>4、ID及Class命名常用名称<br>页头：header<br>登录条：login-bar<br>标志：logo<br>侧栏：side-bar<br>广告：banner<br>导航：nav<br>子导航：sub-nav<br>菜单：menu<br>子菜单：sub-menu<br>搜索：search<br>滚动：scroll<br>页面主体：main<br>内容：content<br>标签页：tab<br>文章列表：list<br>提示信息：msg<br>小技巧：tips<br>栏目标题：title<br>加入：joinus<br>指南：guild<br>服务：service<br>热点：hot<br>新闻：news<br>下载：download<br>注册：regsiter<br>状态：status<br>按钮：btn<br>投票：vote<br>合作伙伴：partner<br>友情链接：friendlink<br>版权：copyright<br>外套：wrap<br>页脚：footer<br>标题：title<br>顶导航：top-nav（mini-nav）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、导航类&quot;&gt;&lt;a href=&quot;#一、导航类&quot; class=&quot;headerlink&quot; title=&quot;一、导航类&quot;&gt;&lt;/a&gt;一、导航类&lt;/h2&gt;&lt;p&gt;导航：nav             主导航：mainbav    子导航：subnav       顶导航：top</summary>
      
    
    
    
    <category term="Web前端" scheme="https://tsingyi1220.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="命名规范" scheme="https://tsingyi1220.github.io/tags/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Git经验总结</title>
    <link href="https://tsingyi1220.github.io/posts/10553.html"/>
    <id>https://tsingyi1220.github.io/posts/10553.html</id>
    <published>2022-09-03T16:00:00.000Z</published>
    <updated>2022-11-23T09:25:00.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><ol><li><p><code>git init</code><strong>初始化本地仓库</strong></p></li><li><p><code>git add .</code><strong>添加&#x2F;删除(所有)文件到暂存区</strong></p></li><li><p><code>git reset HEAD .</code><strong>重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</strong></p></li><li><p><code>git status</code><strong>查看git此时的状态</strong></p></li><li><p><code>git commit -m &#39;message&#39;</code><strong>提交到本地仓库</strong></p></li><li><p><code>git remote add origin Address</code><strong>绑定远程仓库</strong></p></li><li><p><code>git pull origin main/master</code><strong>拉取同步远程服务器代码，无冲突直接合并，有冲突需要手动合并</strong></p></li><li><p><code>git push origin main/master</code><strong>推送至远程仓库</strong></p></li><li><p><code>git log</code><strong>查看提交记录</strong></p></li><li><p><code>git reflog</code><strong>操作记录(查看版本号)</strong></p></li><li><p><code>git reset --hard HEAD^/版本号</code><strong>回退上一个版本&#x2F;某个版本（HEAD表示当前版本 ^表示上一个）</strong></p></li></ol><h1 id="git多人协作"><a href="#git多人协作" class="headerlink" title="git多人协作"></a>git多人协作</h1><ol><li><code>git branch -a</code><strong>查看所有分支</strong></li><li><code>git checkout -b aaa</code><strong>创建新的分支(-b)aaa</strong></li><li><code>git checkout aaa</code><strong>切换到aaa分支</strong></li><li><code>git merge aaa</code><strong>(master)分支aaa合并到master</strong></li><li><code>git push origin aaa</code><strong>推送aaa分支到远程仓库aaa分支</strong></li><li><code>git push origin master:aaa</code><strong>推送master到远程的aaa分支</strong></li><li><code>git branch -d aaa</code><strong>删除aaa分支</strong></li></ol><h1 id="git远程仓库更换名称，本地修改"><a href="#git远程仓库更换名称，本地修改" class="headerlink" title="git远程仓库更换名称，本地修改"></a>git远程仓库更换名称，本地修改</h1><p>这种情况适用于本地和远程的代码没得任何问题，就是远程仓库改了个名称，直接在本地修改远程仓库地址即可：</p><p><code>git remote set-url origin newAddress</code></p><p>另外还可以先删除，然后添加地址：</p><p><code>git remote rm origin</code></p><p><code>git remote add origin newAddress</code></p><h1 id="绑定GitHub"><a href="#绑定GitHub" class="headerlink" title="绑定GitHub"></a>绑定GitHub</h1><p>打开 Git Bash，输入 ssh-keygen -t rsa 命令，表示我们指定 RSA 算法生成密钥，然后敲四次回车键，之后就就会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub.<em><strong>（注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）</strong></em>文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</p><ul><li>Linux 系统：~&#x2F;.ssh</li><li>Mac 系统：~&#x2F;.ssh</li><li>Windows 10 ：C:&#x2F;Users&#x2F;ASUS&#x2F;.ssh</li></ul><p>把公钥 id_rsa.pub 的内容记事本打开复制添加到 GitHub。</p><img src="/posts/10553/git1.jpg" style="zoom: 67%;"><h1 id="同时使用GitHub和Gitee"><a href="#同时使用GitHub和Gitee" class="headerlink" title="同时使用GitHub和Gitee"></a>同时使用GitHub和Gitee</h1><h3 id="1-删掉全局配置"><a href="#1-删掉全局配置" class="headerlink" title="1. 删掉全局配置"></a>1. 删掉全局配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.name <span class="string">&quot;你的名字&quot;</span></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-为不同账户配置ssh秘钥"><a href="#2-为不同账户配置ssh秘钥" class="headerlink" title="2. 为不同账户配置ssh秘钥"></a>2. 为不同账户配置ssh秘钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh <span class="comment"># cd到当前用户的.ssh文件夹</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C <span class="string">&quot;注册gitee邮箱&quot;</span><span class="comment">#为不同秘钥指定名称</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C <span class="string">&quot;注册github邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>完成后会在~&#x2F;.ssh &#x2F; 目录下生成以下文件：</p><ul><li>id_rsa.github</li><li>id_rsa.github.pub</li><li>id_rsa.gitee</li><li>id_rsa.gitee.pub</li></ul><p>复制公钥分别在github和gitee中设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.github.pub</span><br><span class="line"><span class="built_in">cat</span> id_rsa.gitee.pub</span><br></pre></td></tr></table></figure><p>添加新的私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-agent bash</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa.github</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa.gitee</span><br></pre></td></tr></table></figure><h3 id="3-进行全局配置"><a href="#3-进行全局配置" class="headerlink" title="3. 进行全局配置"></a>3. 进行全局配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.ssh/config    </span><br><span class="line"></span><br><span class="line"><span class="comment"># gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa.gitee</span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa.github</span><br></pre></td></tr></table></figure><p>Host 它涵盖了下面一个段的配置，我们可以通过他来替代将要连接的服务器地址。 这里可以使用任意字段或通配符。 当ssh的时候如果服务器地址能匹配上这里Host指定的值，则Host下面指定的HostName将被作为最终的服务器地址使用，并且将使用该Host字段下面配置的所有自定义配置来覆盖默认的&#x2F;etc&#x2F;ssh&#x2F;ssh_config配置信息。</p><p>Port 自定义的端口。默认为22，可不配置</p><p>User 自定义的用户名，默认为git，可不配置</p><p>HostName 真正连接的服务器地址</p><p>PreferredAuthentications 指定优先使用哪种方式验证，支持密码和秘钥验证方式</p><p>IdentityFile 指定本次连接使用的密钥文件</p><h3 id="4-测试连接"><a href="#4-测试连接" class="headerlink" title="4. 测试连接"></a>4. 测试连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">Hi yourname! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">ssh -T git@gitee.com</span></span><br><span class="line"><span class="string">Hi yourname! You&#x27;</span>ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="5-hexo博客仓库"><a href="#5-hexo博客仓库" class="headerlink" title="5. hexo博客仓库"></a>5. hexo博客仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi .depoly_git/.git/config 增加</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">name = username</span><br><span class="line">email = email</span><br></pre></td></tr></table></figure><h3 id="6-针对不同的项目仓库"><a href="#6-针对不同的项目仓库" class="headerlink" title="6. 针对不同的项目仓库"></a>6. 针对不同的项目仓库</h3><p>增加本地配置，在每个仓库的<code>.git/config</code>中进行配置不同的用户，以及其他的配置信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --<span class="built_in">local</span> user.name <span class="string">&#x27;github/gitee账号名&#x27;</span></span><br><span class="line">$ git config --<span class="built_in">local</span> user.email <span class="string">&#x27;github/gitee账号邮箱&#x27;</span></span><br></pre></td></tr></table></figure><p>–global是在全局配置文件中设置</p><p>–local 是针对当前仓库的项目进行设置</p><h2 id="更新hexo-blog"><a href="#更新hexo-blog" class="headerlink" title="更新hexo blog"></a>更新hexo blog</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean   <span class="comment">#清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g       <span class="comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo s       <span class="comment">#启动本地服务器预览网页</span></span><br><span class="line">hexo d       <span class="comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure><h2 id="项目打包dist文件commit出错"><a href="#项目打包dist文件commit出错" class="headerlink" title="项目打包dist文件commit出错"></a>项目打包dist文件commit出错</h2><p><strong>检查后发现格式不符合标准,git不让上传,为了避免格式检查用</strong><br><code>git commit -m &quot;dist1&quot; --no-verify</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git常用命令&quot;&gt;&lt;a href=&quot;#git常用命令&quot; class=&quot;headerlink&quot; title=&quot;git常用命令&quot;&gt;&lt;/a&gt;git常用命令&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;strong&gt;初始化本地仓库&lt;/str</summary>
      
    
    
    
    <category term="Web前端" scheme="https://tsingyi1220.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Git" scheme="https://tsingyi1220.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>vue-router钩子函数与执行流程</title>
    <link href="https://tsingyi1220.github.io/posts/4511.html"/>
    <id>https://tsingyi1220.github.io/posts/4511.html</id>
    <published>2022-09-03T16:00:00.000Z</published>
    <updated>2022-11-23T11:01:11.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h2><h3 id="前置守卫-beforeEach"><a href="#前置守卫-beforeEach" class="headerlink" title="前置守卫 beforeEach"></a>前置守卫 <code>beforeEach</code></h3><p>全局前置守卫，在路由跳转前触发，它在 <code>每次导航</code> 时都会触发。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to:&#x27;</span>, to);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from:&#x27;</span>, <span class="keyword">from</span>);</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><code>beforeEach</code> 全局前置守卫接收三个参数：</p><ol><li><code>to: Route:</code> 即将要进入的目标路由对象</li><li><code>from: Route:</code> 当前导航正要离开的路由对象</li><li><code>next: Function:</code> 一定要调用该方法不然会阻塞路由</li></ol><div class="note warning flat"><p><strong><code>next</code> 参数可以不添加，但是一旦添加，则必须调用一次，否则路由跳转等会停止。</strong></p></div><p><code>next()</code>方法的几种情况</p><ol><li><code>next()</code>: 进行管道中的下一个钩子。</li><li><code>next(false)</code>: 中断当前的导航。回到 <code>from</code> 路由对应的地址。</li><li><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code>: 跳转到一个不同的地址，可传递的参数与 <code>router.push</code> 中选项一致。</li><li><code>next(error)</code>: 导航终止，且该错误会被传递给 <code>router.onError()</code> 注册过的回调。</li></ol><p>返回值：</p><ul><li><code>false</code>：取消当前的导航。</li><li><code>null，undefined，true</code>或者直接<code>return</code>：调用下一个导航守卫。</li></ul><h3 id="解析守卫-beforeResolve"><a href="#解析守卫-beforeResolve" class="headerlink" title="解析守卫 beforeResolve"></a>解析守卫 <code>beforeResolve</code></h3><p>全局解析守卫，在路由跳转前，所有 <code>组件内守卫</code> 和 <code>异步路由组件</code> 被解析之后触发，它同样在 <code>每次导航</code> 时都会触发。</p><p>通过 <code>router.beforeResolve</code> 注册一个全局解析守卫：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回调参数，返回值和 <code>beforeEach</code> 一样。也可以定义多个全局解析守卫。</p><h3 id="后置守卫-afterEach"><a href="#后置守卫-afterEach" class="headerlink" title="后置守卫 afterEach"></a>后置守卫 afterEach</h3><p>全局后置钩子，它发生在路由跳转完成后，<code>beforeEach</code> 和 <code>beforeResolve</code> 之后，<code>beforeRouteEnter</code>（组件内守卫）之前。它同样在 <code>每次导航</code> 时都会触发。</p><p>通过 <code>router.afterEach</code> 注册一个全局后置钩子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;to:&#x27;</span>, to);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;from:&#x27;</span>, <span class="keyword">from</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由独享守卫-beforeEnter"><a href="#路由独享守卫-beforeEnter" class="headerlink" title="路由独享守卫 beforeEnter"></a>路由独享守卫 <code>beforeEnter</code></h2><p>路由守卫只有一个，就是 <code>beforeEnter</code>，<code>beforeEnter</code> 守卫 只在进入路由时触发，不会在 <code>params</code>、<code>query</code> 或 <code>hash</code> 改变时触发。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../components/A.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter &#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件守卫"><a href="#组件守卫" class="headerlink" title="组件守卫"></a>组件守卫</h2><h3 id="beforeRouteEnter"><a href="#beforeRouteEnter" class="headerlink" title="beforeRouteEnter"></a>beforeRouteEnter</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 在渲染该组件的对应路由被验证前调用</span></span><br><span class="line">  <span class="comment">// 不能获取组件实例 `this` ！</span></span><br><span class="line">  <span class="comment">// 因为当守卫执行时，组件实例还没被创建！</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>beforeRouteEnter</code> 守卫 不能 访问 <code>this</code>，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。</p><p>不过，你可以通过传一个回调给 <code>next</code> 来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beforeRouteUpdate"><a href="#beforeRouteUpdate" class="headerlink" title="beforeRouteUpdate"></a>beforeRouteUpdate</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">  <span class="comment">// just use `this`</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = to.<span class="property">params</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beforeRouteLeave"><a href="#beforeRouteLeave" class="headerlink" title="beforeRouteLeave"></a>beforeRouteLeave</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;Do you really want to leave? you have unsaved changes!&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!answer) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以不支持 <code>传递回调</code>，因为没有必要了</p><h2 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h2><ol><li>导航被触发</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫</li><li>调用全局的 <code>beforeEach</code> 守卫</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫</li><li>在路由配置里调用 <code>beforeEnter</code></li><li>解析异步路由组件</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code> 守卫</li><li>调用全局的 <code>beforeResolve</code> 守卫</li><li>导航被确认</li><li>调用全局的 <code>afterEach</code> 守卫</li><li>触发 <code>DOM</code> 更新</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;全局守卫&quot;&gt;&lt;a href=&quot;#全局守卫&quot; class=&quot;headerlink&quot; title=&quot;全局守卫&quot;&gt;&lt;/a&gt;全局守卫&lt;/h2&gt;&lt;h3 id=&quot;前置守卫-beforeEach&quot;&gt;&lt;a href=&quot;#前置守卫-beforeEach&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Web前端" scheme="https://tsingyi1220.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue-router" scheme="https://tsingyi1220.github.io/tags/Vue-router/"/>
    
  </entry>
  
  <entry>
    <title>this指向</title>
    <link href="https://tsingyi1220.github.io/posts/36763.html"/>
    <id>https://tsingyi1220.github.io/posts/36763.html</id>
    <published>2022-09-02T16:00:00.000Z</published>
    <updated>2022-11-23T08:55:34.586Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、方法调用模式"><a href="#一、方法调用模式" class="headerlink" title="一、方法调用模式"></a>一、方法调用模式</h3><p>​    当函数被保存为一个对象的属性时，它就可称为这个对象的方法。当一个方法被调用时，this被绑定到这个对象上。如果调用表达式包含一个提取属性的动作（. 或 []），那么它被称为方法调用。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;TsingYi&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;  <span class="comment">// 如果是箭头函数this就会指向window</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayName</span>();  <span class="comment">//TsingYi</span></span><br></pre></td></tr></table></figure><p>sayName函数作为对象obj的方法调用，所以函数体中的this就代表obj对象。</p><h3 id="二、函数调用模式"><a href="#二、函数调用模式" class="headerlink" title="二、函数调用模式"></a>二、函数调用模式</h3><p>​    当一个函数并非一个对象的属性时，那么它就是被当做函数来调用的。在此种模式下，this被绑定为全局对象，在浏览器环境下就是window对象。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>sayName以函数调用模式调用，所以函数体中的this代表window对象。</p><h3 id="三、构造函数模式"><a href="#三、构造函数模式" class="headerlink" title="三、构造函数模式"></a>三、构造函数模式</h3><p>​    如果在一个函数前面加上new关键字来调用，那么就会创建一个连接到该函数的prototype成员的新对象，同时，this会被绑定到这个新对象上。这种情况下，这个函数就可以成为此对象的构造函数。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;TsingYi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);   <span class="comment">//TsingYi</span></span><br></pre></td></tr></table></figure><p>Obj作为构造函数被调用，函数体内的this被绑定为新创建的对象person。</p><h3 id="四、apply调用模式"><a href="#四、apply调用模式" class="headerlink" title="四、apply调用模式"></a>四、apply调用模式</h3><p>  在JS中，函数也是对象，所有函数对象都有两个方法：apply和call，这两个方法可以让我们构建一个参数数组传递给调用函数，也允许我们改变this的值。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;TsingYi&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>();    <span class="comment">//window</span></span><br><span class="line">sayName.<span class="title function_">apply</span>(person);   <span class="comment">//TsingYi</span></span><br><span class="line">sayName.<span class="title function_">apply</span>();    <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p>  当以函数调用模式调用sayName时，this代表window；当用apply模式调用sayName，并给它传入的第一个参数为person时，this被绑定到person对象上。如果不给apply传入任何参数，则this代表window。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;TsingYi&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: showName</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Xiaoming&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> fun = person1.<span class="property">sayName</span>;</span><br><span class="line">        <span class="title function_">fun</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person1.<span class="title function_">sayName</span>();    <span class="comment">//TsingYi</span></span><br><span class="line">person2.<span class="title function_">sayName</span>();    <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p>person1.sayName(); 首先确定这是方法调用模式，对象为person1，再看sayName被赋值为全局函数对象showName，在showName执行时，this绑定的是person1，所以结果为”TsingYi”。<br>person2.sayName(); 这还是方法调用模式，对象为person2，调用的是它的sayName方法。再看sayName函数体，发现函数体最终执行的函数是fun，fun是用函数调用模式调用的。而fun最终也被赋值为showName函数，因为fun是用函数调用模式调用的，所以这里的this绑定为window，结果为”window“。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、方法调用模式&quot;&gt;&lt;a href=&quot;#一、方法调用模式&quot; class=&quot;headerlink&quot; title=&quot;一、方法调用模式&quot;&gt;&lt;/a&gt;一、方法调用模式&lt;/h3&gt;&lt;p&gt;​    当函数被保存为一个对象的属性时，它就可称为这个对象的方法。当一个方法被调用时，th</summary>
      
    
    
    
    <category term="Web前端" scheme="https://tsingyi1220.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://tsingyi1220.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
